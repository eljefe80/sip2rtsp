# Optional: logger verbosity settings
logger:
  # Optional: Default log verbosity (default: shown below)
  default: info
  # Optional: Component specific logger overrides
  logs:
    sip2rtsp.baresip_ctrl: info
    sip2rtsp.app: info
    tornado.access: warning
    tornado.application: info
    tornado.general: info

# Optional: set environment variables
environment_vars:
  EXAMPLE_VAR: value

rtsp_server:
  # Note: if you change the port and/or the mount point the streamURI must also be adjusted accordingly. See below.
  port: 19554
  mount_point: /sip2rtsp-cam

  # === VIDEOTESTSRC/AUDIOTESTSRC
  # Example launch string for the gstreamer RTSP server to use the videotestsrc for the video stream. Encoded to H264 always.
  # Audio is taken from the audiotestsrc. Encoded to PCM ulaw always. 
  # videotestsrc is-live=true ! video/x-raw,format=I420,width=1280,height=720,framerate=15/1 ! x264enc bitrate=2000 speed-preset=superfast tune=zerolatency key-int-max=60 ! rtph264pay config-interval=1 name=pay0 pt=96 audiotestsrc is-live=true ! mulawenc ! rtppcmupay name=pay1

  # === RTSP camera as input for video and audio (or baresip for audio or both mixed)
  # Example launch string for the gstreamer RTSP server to connect to a RTSP camera for the video stream. Transcoded to H264 always.
  # Audio is taken from the RTSP camera. Transcoded to OPUS always. Could also use the baresip speaker named "BaresipSpeakerInput" instead or mix both using audiomixer element
  # rtspsrc location=rtsp://10.10.10.10:8554/gartentor_h264_ext name=rtspsrc ! decodebin ! videoconvert ! videoscale ! videorate ! video/x-raw,format=I420,width=1280,height=720,framerate=15/1 ! x264enc bitrate=2000 speed-preset=superfast tune=zerolatency key-int-max=60 ! rtph264pay config-interval=1 name=pay0 pt=96 rtspsrc. ! decodebin ! audioconvert ! audioresample ! audio/x-raw ! opusenc ! rtpopuspay name=pay1"         pulsesrc device=\"BaresipSpeakerInput\

  === MJPEG camera as input for video and baresip for audio
  # Example launch string for the gstreamer RTSP server to connect to a MJPEG HTTP camera for the video stream. Encoded to H264.
  # Audio is taken from the baresip speaker named "BaresipSpeakerInput". Encoded to OPUS.
  launch_string: souphttpsrc location=http://10.10.10.10:54321/stream is-live=true do-timestamp=true timeout=5 ! multipartdemux ! jpegdec ! videoconvert ! videoscale ! videorate ! clockoverlay ! video/x-raw,format=I420,width=1280,height=720,framerate=15/1 ! x264enc speed-preset=superfast bitrate=2000 option-string=keyint=60:min-keyint=50 key-int-max=70 ! h264parse ! rtph264pay config-interval=1 name=pay0 pt=96 pulsesrc device="BaresipSpeakerInput" do-timestamp=true ! queue ! audioconvert ! audioresample ! audio/x-raw,format=S16LE,channels=1,rate=8000 ! opusenc ! rtpopuspay name=pay1
  # ( capsfilter caps="application/x-rtp,media=audio,payload=0,clock-rate=8000,encoding-name=PCMU" name=depay_backchannel ! rtppcmudepay ! mulawdec ! audioconvert ! audioresample ! audio/x-raw,format=S16LE,channels=1,rate=8000 ! pulsesink device="BaresipMicrophone" async=false )

  # Just leave it as it is. Important is that the pulse sink device name is "BaresipMicrophone" to send audio from the backchannel to the baresip microphone
  backchannel_launch_string: ( capsfilter caps="application/x-rtp,media=audio,payload=0,clock-rate=8000,encoding-name=PCMU" name=depay_backchannel ! rtppcmudepay ! mulawdec ! audioconvert ! audioresample ! audio/x-raw,format=S16LE,channels=1,rate=8000 ! pulsesink device="BaresipMicrophone" async=false )

  # See gstreamer documentation
  latency: 200

  # See gstreamer documentation
  enable_rtcp: false

sip:
  # Remote SIP URI to call if the ONVIF backchannel is established
  remote_uri: sip:11@10.10.10.80

onvif:
  # IP address to listen on
  listen_server_address: 0.0.0.0

  # Port to listen on
  listen_server_port: 10101

  # Just used in the generated ONVIF responses to generate the required ONVIF service address URLs.
  advertised_server_address: <YOUR_DOCKER_HOST_IP>
  advertised_server_port: 10101

  # Just used in the generated ONVIF responses
  hostname: sip2rtsp-cam

  camera:
    # Just used in the generated ONVIF responses
    name: sip2rtsp-cam

    # Just used in the generated ONVIF responses
    location: sip2rtsp-location

    # Currently sip2rtsp does not support generating a snapshot from a video stream. So provide the snapshot URI of the camera here.
    snapshotUri: http://<YOUR_CAMERA_IP>:54321/snapshot

    # The streamURI must be adjusted if the port and/or mount_point from the rtsp_server config were changed. This points to our local gstreamer RTSP server.
    streamUri: rtsp://<YOUR_DOCKER_HOST_IP:19554/sip2rtsp-cam
    
    # Details are just used in the ONVIF responses and not to scale the image or any framerate conversion. If this is desired, adjust the launch_string of the RTSP server accordingly. See above.
    width: 1920
    height: 1080
    fps: 30
    bitrate: 1000
